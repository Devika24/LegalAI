# -*- coding: utf-8 -*-
"""Final_legalAI.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-DZDxTJgkm7JTM23i9ingZbI6PcU50wX
"""

!pip install crewai google-generativeai pydantic python-dotenv serper openai



!pip install crewai

!pip install serper

!pip install openai

import os
import re
import json
from typing import Dict, List, Any
from datetime import datetime
from crewai import Agent, Task, Crew, Process
import google.generativeai as genai
from pydantic import BaseModel
from google.colab import userdata
import openai

# -*- coding: utf-8 -*-
"""Legal Document Generation with Multi-Agent System using CrewAI and GPT"""

# Get API keys from Colab secrets
try:
    GEMINI_API_KEY = userdata.get('GEMINI_API_KEY')
    SERPER_API_KEY = userdata.get('SERPER_API_KEY')
    OPENAI_API_KEY = userdata.get('OPEN_API_KEY') # Corrected secret name

    # Configure APIs
    genai.configure(api_key=GEMINI_API_KEY)
    openai.api_key = OPENAI_API_KEY
except Exception as e:
    print(f"Error loading API keys: {e}")

# Configure generation model
generation_config = {
    "temperature": 0.7,
    "top_p": 0.95,
    "top_k": 40,
    "max_output_tokens": 2048,
}

safety_settings = [
    {"category": "HARM_CATEGORY_HARASSMENT", "threshold": "BLOCK_MEDIUM_AND_ABOVE"},
    {"category": "HARM_CATEGORY_HATE_SPEECH", "threshold": "BLOCK_MEDIUM_AND_ABOVE"},
    {"category": "HARM_CATEGORY_SEXUALLY_EXPLICIT", "threshold": "BLOCK_MEDIUM_AND_ABOVE"},
    {"category": "HARM_CATEGORY_DANGEROUS_CONTENT", "threshold": "BLOCK_MEDIUM_AND_ABOVE"},
]

# Initialize the model
model = genai.GenerativeModel(
    model_name="gemini-1.5-flash-latest",
    generation_config=generation_config,
    safety_settings=safety_settings
)

# Define output models
class LegalDocument(BaseModel):
    title: str
    content: str
    document_type: str
    parties: List[str]
    effective_date: str
    clauses: List[str]
    metadata: Dict[str, Any]

class HallucinationCheckResult(BaseModel):
    score: float
    issues: List[str]
    status: str

# Define agents
legal_expert = Agent(
    role="Senior Legal Expert",
    goal="Draft comprehensive and legally sound documents",
    backstory="""You are a seasoned legal professional with expertise in contract law,
    corporate law, and legal document drafting. You have worked at top law firms
    and have extensive experience in creating watertight legal agreements.""",
    verbose=True,
    allow_delegation=False,
    llm='openai/gpt-4'
)

compliance_officer = Agent(
    role="Compliance Officer",
    goal="Ensure documents comply with all relevant regulations and standards",
    backstory="""You are a meticulous compliance expert with deep knowledge of
    GDPR, CCPA, industry-specific regulations, and international compliance standards.
    You ensure all documents meet legal requirements and protect all parties involved.""",
    verbose=True,
    allow_delegation=False,
    llm='openai/gpt-4'
)

risk_analyst = Agent(
    role="Risk Analyst",
    goal="Identify and mitigate potential risks in legal documents",
    backstory="""You specialize in risk assessment for legal agreements.
    You have a keen eye for spotting potential liabilities, ambiguities,
    and unfavorable clauses that could pose risks to clients.""",
    verbose=True,
    allow_delegation=False,
    llm='openai/gpt-4'
)

quality_assurance = Agent(
    role="Quality Assurance Specialist",
    goal="Verify accuracy and check for hallucinations in generated content",
    backstory="""You are an expert in fact-checking and quality assurance.
    You use advanced techniques including RAG systems to verify information
    and ensure generated content is accurate and reliable.""",
    verbose=True,
    allow_delegation=False,
    llm='openai/gpt-4'
)

# Define task functions
def create_draft_task(requirements):
    return Task(
        description=f"Draft a {requirements.get('document_type', 'legal document')} between {', '.join(requirements.get('parties', ['Party A', 'Party B']))} with clauses: {', '.join(requirements.get('clauses', []))}",
        agent=legal_expert,
        expected_output="A comprehensive legal document draft"
    )

def compliance_review_task():
    return Task(
        description="Review the drafted document for compliance with all relevant regulations",
        agent=compliance_officer,
        expected_output="A compliance report with any necessary changes"
    )

def risk_assessment_task():
    return Task(
        description="Analyze the document for potential risks and liabilities",
        agent=risk_analyst,
        expected_output="A risk assessment report with recommendations"
    )

def quality_assurance_task():
    return Task(
        description="Verify the accuracy of the document and check for hallucinations",
        agent=quality_assurance,
        expected_output="A quality assurance report with accuracy score and issues found"
    )

# Document generation function
def generate_with_gemini(prompt: str) -> str:
    """Generate content using Gemini API"""
    try:
        response = model.generate_content(prompt)
        return response.text
    except Exception as e:
        return f"Error generating content with Gemini: {str(e)}"

# Hallucination detection function
def detect_hallucinations(text: str, context: str = "") -> HallucinationCheckResult:
    """Check generated content for potential hallucinations"""
    prompt = f"""
    Analyze the following legal document content for potential hallucinations or inaccuracies:

    CONTEXT: {context}

    DOCUMENT CONTENT:
    {text}

    Identify any statements that may be:
    1. Legally inaccurate or non-standard
    2. Based on assumptions rather than facts
    3. Potentially misleading or ambiguous
    4. Not supported by standard legal practice

    Return your analysis as a JSON object with:
    - score: float between 0-1 (1 being completely accurate)
    - issues: list of identified problems
    - status: "PASS", "REVIEW_NEEDED", or "FAIL"
    """

    try:
        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.3,
            max_tokens=1000
        )
        # Extract JSON from response
        json_match = re.search(r'\{.*\}', response.choices[0].message.content, re.DOTALL)
        if json_match:
            result = json.loads(json_match.group())
            return HallucinationCheckResult(**result)
        else:
            return HallucinationCheckResult(
                score=0.5,
                issues=["Could not parse hallucination detection results"],
                status="REVIEW_NEEDED"
            )
    except Exception as e:
        return HallucinationCheckResult(
            score=0.0,
            issues=[f"Error in hallucination detection: {str(e)}"],
            status="FAIL"
        )

# Main function to generate legal document
def generate_legal_document(requirements: Dict[str, Any]) -> Dict[str, Any]:
    """Generate a legal document using multi-agent system"""
    print("Starting legal document generation process...")

    # Create tasks
    draft_task = create_draft_task(requirements)
    compliance_task = compliance_review_task()
    risk_task = risk_assessment_task()
    qa_task = quality_assurance_task()

    # Form crew
    legal_crew = Crew(
        agents=[legal_expert, compliance_officer, risk_analyst, quality_assurance],
        tasks=[draft_task, compliance_task, risk_task, qa_task],
        process=Process.sequential,
        verbose=True
    )

    # Execute crew
    results = legal_crew.kickoff()

    # Generate the actual document using Gemini
    document_prompt = f"""
    Create a comprehensive {requirements.get('document_type', 'legal document')}
    between {', '.join(requirements.get('parties', ['Party A', 'Party B']))}.

    Key clauses to include: {', '.join(requirements.get('clauses', []))}

    Additional requirements: {requirements.get('special_requirements', 'None')}

    Based on the analysis from our legal team:
    {results}

    Generate a complete, professionally formatted legal document.
    Include all standard sections: definitions, obligations, terms, limitations, etc.
    """

    document_content = generate_with_gemini(document_prompt)

    # Check for hallucinations
    hallucination_check = detect_hallucinations(document_content, context=results)

    # Prepare final output
    legal_doc = LegalDocument(
        title=f"{requirements.get('document_type', 'Agreement')} between {', '.join(requirements.get('parties', ['Party A', 'Party B']))}",
        content=document_content,
        document_type=requirements.get('document_type', 'Agreement'),
        parties=requirements.get('parties', ['Party A', 'Party B']),
        effective_date=datetime.now().strftime("%Y-%m-%d"),
        clauses=requirements.get('clauses', []),
        metadata={
            "generation_date": datetime.now().isoformat(),
            "hallucination_score": hallucination_check.score,
            "hallucination_status": hallucination_check.status,
            "issues_identified": hallucination_check.issues
        }
    )

    return {
        "document": legal_doc.dict(),
        "analysis_results": str(results),
        "hallucination_check": hallucination_check.dict()
    }

# Example usage
if __name__ == "__main__":
    # Example requirements
    document_requirements = {
        "document_type": "Service Agreement",
        "parties": ["Tech Solutions Inc.", "Global Enterprises Ltd."],
        "clauses": ["Confidentiality", "Liability", "Payment Terms", "Termination", "Intellectual Property"],
        "special_requirements": "Include a limitation of liability clause with a cap of 100% of contract value"
    }

    # Generate the document
    result = generate_legal_document(document_requirements)

    # Print results
    print("\n" + "="*60)
    print("LEGAL DOCUMENT GENERATION COMPLETE")
    print("="*60)

    print(f"\nDocument Title: {result['document']['title']}")
    print(f"Document Type: {result['document']['document_type']}")
    print(f"Parties: {', '.join(result['document']['parties'])}")
    print(f"Hallucination Score: {result['hallucination_check']['score']}/1.0")
    print(f"Status: {result['hallucination_check']['status']}")

    if result['hallucination_check']['issues']:
        print("\nIssues Identified:")
        for issue in result['hallucination_check']['issues']:
            print(f"- {issue}")

    print("\n" + "="*60)
    print("DOCUMENT CONTENT PREVIEW:")
    print("="*60)
    print(result['document']['content'][:500] + "..." if len(result['document']['content']) > 500 else result['document']['content'])

from google.colab import userdata
userdata.get('GEMINI_API_KEY')

from google.colab import userdata
userdata.get('OPEN_API_KEY')

from google.colab import userdata
userdata.get('SERPER_API_KEY')

import os
from google.colab import userdata

# Set the OpenAI API key as an environment variable
os.environ['OPENAI_API_KEY'] = userdata.get('OPEN_API_KEY')

print("OpenAI API key environment variable set.")